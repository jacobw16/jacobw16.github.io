{"id":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js","dependencies":[{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\convolutional_depthwise.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\package.json","includedInParent":true,"mtime":1581896610560},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1581030261368},{"name":"@tensorflow/tfjs-core","loc":{"line":29,"column":26},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"../backend/common","loc":{"line":30,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\common.js"},{"name":"../backend/tfjs_backend","loc":{"line":31,"column":16},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\tfjs_backend.js"},{"name":"../common","loc":{"line":32,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\common.js"},{"name":"../constraints","loc":{"line":33,"column":28},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\constraints.js"},{"name":"../errors","loc":{"line":34,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\errors.js"},{"name":"../initializers","loc":{"line":35,"column":29},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\initializers.js"},{"name":"../regularizers","loc":{"line":36,"column":29},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\regularizers.js"},{"name":"../utils/conv_utils","loc":{"line":37,"column":27},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\conv_utils.js"},{"name":"../utils/types_utils","loc":{"line":38,"column":28},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\types_utils.js"},{"name":"./convolutional","loc":{"line":39,"column":30},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional_depthwise.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar common_1 = require(\"../backend/common\");\nvar K = require(\"../backend/tfjs_backend\");\nvar common_2 = require(\"../common\");\nvar constraints_1 = require(\"../constraints\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar types_utils_1 = require(\"../utils/types_utils\");\nvar convolutional_1 = require(\"./convolutional\");\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nfunction depthwiseConv2d(x, depthwiseKernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) { strides = [1, 1]; }\n    if (padding === void 0) { padding = 'valid'; }\n    return tfjs_core_1.tidy(function () {\n        if (dataFormat == null) {\n            dataFormat = common_1.imageDataFormat();\n        }\n        common_2.checkDataFormat(dataFormat);\n        var y = convolutional_1.preprocessConv2DInput(x, dataFormat);\n        if (x.rank !== 4) {\n            throw new errors_1.ValueError(\"Input for depthwiseConv2d is required to be 4-D, but is instead \" +\n                (x.rank + \"-D\"));\n        }\n        if (depthwiseKernel.rank !== 4) {\n            throw new errors_1.ValueError(\"depthwiseKernel is required to be 4-D, but is instead \" +\n                (depthwiseKernel.rank + \"-D\"));\n        }\n        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nexports.depthwiseConv2d = depthwiseConv2d;\nvar DepthwiseConv2D = /** @class */ (function (_super) {\n    __extends(DepthwiseConv2D, _super);\n    function DepthwiseConv2D(args) {\n        var _this = _super.call(this, 2, args) || this;\n        _this.depthwiseKernel = null;\n        _this.depthMultiplier =\n            args.depthMultiplier == null ? 1 : args.depthMultiplier;\n        _this.depthwiseInitializer = initializers_1.getInitializer(args.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.depthwiseConstraint = constraints_1.getConstraint(args.depthwiseConstraint);\n        _this.depthwiseRegularizer = regularizers_1.getRegularizer(args.depthwiseRegularizer);\n        return _this;\n    }\n    DepthwiseConv2D.prototype.build = function (inputShape) {\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new errors_1.ValueError(\"Inputs to DepthwiseConv2D should have rank 4. \" +\n                (\"Received input shape: \" + JSON.stringify(inputShape) + \".\"));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new errors_1.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +\n                (\"be defined, but is not (\" + inputShape[channelAxis] + \").\"));\n        }\n        var inputDim = inputShape[channelAxis];\n        var depthwiseKernelShape = [\n            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n        ];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    DepthwiseConv2D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = types_utils_1.getExactlyOneTensor(inputs);\n            var outputs = depthwiseConv2d(inputs, _this.depthwiseKernel.read(), _this.strides, _this.padding, _this.dataFormat, null);\n            // TODO(cais): Add support for dilation.\n            if (_this.useBias) {\n                outputs = K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);\n            }\n            if (_this.activation != null) {\n                outputs = _this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    };\n    DepthwiseConv2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        var outFilters = this.dataFormat === 'channelsFirst' ?\n            inputShape[1] * this.depthMultiplier :\n            inputShape[3] * this.depthMultiplier;\n        var outRows = conv_utils_1.convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        var outCols = conv_utils_1.convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        }\n        else {\n            // In this case, assume 'channelsLast'.\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    };\n    DepthwiseConv2D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        config['depthMultiplier'] = this.depthMultiplier;\n        config['depthwiseInitializer'] =\n            initializers_1.serializeInitializer(this.depthwiseInitializer);\n        config['depthwiseRegularizer'] =\n            regularizers_1.serializeRegularizer(this.depthwiseRegularizer);\n        config['depthwiseConstraint'] =\n            constraints_1.serializeConstraint(this.depthwiseRegularizer);\n        return config;\n    };\n    /** @nocollapse */\n    DepthwiseConv2D.className = 'DepthwiseConv2D';\n    return DepthwiseConv2D;\n}(convolutional_1.BaseConv));\nexports.DepthwiseConv2D = DepthwiseConv2D;\ntfjs_core_1.serialization.registerClass(DepthwiseConv2D);\n"},"sourceMaps":{"js":{"version":3,"file":"convolutional_depthwise.js","sourceRoot":"","sources":["../../src/layers/convolutional_depthwise.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {BaseConv, BaseConvLayerArgs, ConvLayerArgs, preprocessConv2DInput} from './convolutional';\n\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(\n    x: Tensor, depthwiseKernel: Tensor, strides: [number, number] = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n          `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(\n          `depthwiseKernel is required to be 4-D, but is instead ` +\n          `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(\n        y as Tensor4D, depthwiseKernel as Tensor4D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\nexport declare interface DepthwiseConv2DLayerArgs extends BaseConvLayerArgs {\n  /**\n   * An integer or Array of 2 integers, specifying the width and height of the\n   * 2D convolution window. Can be a single integer to specify the same value\n   * for all spatial dimensions.\n   */\n  kernelSize: number|[number, number];\n\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal to\n   * `filtersIn * depthMultiplier`.\n   * Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   * Default: GlorotNormal.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regulzarizer function for the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class DepthwiseConv2D extends BaseConv {\n  /** @nocollapse */\n  static className = 'DepthwiseConv2D';\n  private readonly depthMultiplier: number;\n  private readonly depthwiseInitializer: Initializer;\n  private readonly depthwiseConstraint: Constraint;\n  private readonly depthwiseRegularizer: Regularizer;\n\n  private depthwiseKernel: LayerVariable = null;\n\n  constructor(args: DepthwiseConv2DLayerArgs) {\n    super(2, args as ConvLayerArgs);\n    this.depthMultiplier =\n        args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(\n          `Inputs to DepthwiseConv2D should have rank 4. ` +\n          `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          'The channel dimension of the inputs to DepthwiseConv2D should ' +\n          `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape: Shape = [\n      this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n    ];\n\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, null,\n        this.depthwiseInitializer, this.depthwiseRegularizer, true,\n        this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [inputDim * this.depthMultiplier], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(\n          inputs, this.depthwiseKernel.read(), this.strides as [number, number],\n          this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ?\n        inputShape[1] * this.depthMultiplier :\n        inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(\n        rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(\n        cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\nserialization.registerClass(DepthwiseConv2D);\n"]}},"error":null,"hash":"ef32e87169da7adac61ae888cbedb7e2","cacheData":{"env":{}}}