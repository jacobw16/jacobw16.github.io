{"id":"node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js","dependencies":[{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\convolutional.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\package.json","includedInParent":true,"mtime":1577649187475},{"name":"@tensorflow/tfjs-core","loc":{"line":29,"column":26},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"../activations","loc":{"line":30,"column":28},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\activations.js"},{"name":"../backend/common","loc":{"line":31,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\common.js"},{"name":"../backend/tfjs_backend","loc":{"line":32,"column":16},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\tfjs_backend.js"},{"name":"../common","loc":{"line":33,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\common.js"},{"name":"../constraints","loc":{"line":34,"column":28},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\constraints.js"},{"name":"../engine/topology","loc":{"line":35,"column":25},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\topology.js"},{"name":"../errors","loc":{"line":36,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\errors.js"},{"name":"../initializers","loc":{"line":37,"column":29},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\initializers.js"},{"name":"../regularizers","loc":{"line":38,"column":29},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\regularizers.js"},{"name":"../utils/conv_utils","loc":{"line":39,"column":27},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\conv_utils.js"},{"name":"../utils/generic_utils","loc":{"line":40,"column":28},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\generic_utils.js"},{"name":"../utils/types_utils","loc":{"line":41,"column":28},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\types_utils.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar activations_1 = require(\"../activations\");\nvar common_1 = require(\"../backend/common\");\nvar K = require(\"../backend/tfjs_backend\");\nvar common_2 = require(\"../common\");\nvar constraints_1 = require(\"../constraints\");\nvar topology_1 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar types_utils_1 = require(\"../utils/types_utils\");\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nfunction preprocessConv2DInput(x, dataFormat) {\n    // TODO(cais): Cast type to float32 if not.\n    return tfjs_core_1.tidy(function () {\n        common_2.checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\nexports.preprocessConv2DInput = preprocessConv2DInput;\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nfunction preprocessConv3DInput(x, dataFormat) {\n    return tfjs_core_1.tidy(function () {\n        common_2.checkDataFormat(dataFormat);\n        if (dataFormat === 'channelsFirst') {\n            return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n        }\n        else {\n            return x;\n        }\n    });\n}\nexports.preprocessConv3DInput = preprocessConv3DInput;\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nfunction conv1dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) { strides = 1; }\n    if (padding === void 0) { padding = 'valid'; }\n    if (dilationRate === void 0) { dilationRate = 1; }\n    return tfjs_core_1.tidy(function () {\n        if (dataFormat == null) {\n            dataFormat = common_1.imageDataFormat();\n        }\n        common_2.checkDataFormat(dataFormat);\n        // Check the ranks of x, kernel and bias.\n        if (x.shape.length !== 3) {\n            throw new errors_1.ValueError(\"The input of a conv1dWithBias operation should be 3, but is \" +\n                (x.shape.length + \" instead.\"));\n        }\n        if (kernel.shape.length !== 3) {\n            throw new errors_1.ValueError(\"The kernel for a conv1dWithBias operation should be 3, but is \" +\n                (kernel.shape.length + \" instead\"));\n        }\n        if (bias != null && bias.shape.length !== 1) {\n            throw new errors_1.ValueError(\"The bias for a conv1dWithBias operation should be 1, but is \" +\n                (kernel.shape.length + \" instead\"));\n        }\n        // TODO(cais): Support CAUSAL padding mode.\n        if (dataFormat === 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n        }\n        if (padding === 'causal') {\n            throw new errors_1.NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        var y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        return y;\n    });\n}\nexports.conv1dWithBias = conv1dWithBias;\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nfunction conv1d(x, kernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) { strides = 1; }\n    if (padding === void 0) { padding = 'valid'; }\n    if (dilationRate === void 0) { dilationRate = 1; }\n    return tfjs_core_1.tidy(function () {\n        common_2.checkDataFormat(dataFormat);\n        return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\nexports.conv1d = conv1d;\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nfunction conv2d(x, kernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) { strides = [1, 1]; }\n    if (padding === void 0) { padding = 'valid'; }\n    return tfjs_core_1.tidy(function () {\n        common_2.checkDataFormat(dataFormat);\n        return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\nexports.conv2d = conv2d;\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nfunction conv2dWithBiasActivation(x, kernel, bias, strides, padding, dataFormat, dilationRate, activation) {\n    if (strides === void 0) { strides = [1, 1]; }\n    if (padding === void 0) { padding = 'valid'; }\n    if (activation === void 0) { activation = null; }\n    return tfjs_core_1.tidy(function () {\n        if (dataFormat == null) {\n            dataFormat = common_1.imageDataFormat();\n        }\n        common_2.checkDataFormat(dataFormat);\n        if (x.rank !== 3 && x.rank !== 4) {\n            throw new errors_1.ValueError(\"conv2dWithBiasActivation expects input to be of rank 3 or 4, \" +\n                (\"but received \" + x.rank + \".\"));\n        }\n        if (kernel.rank !== 3 && kernel.rank !== 4) {\n            throw new errors_1.ValueError(\"conv2dWithBiasActivation expects kernel to be of rank 3 or 4, \" +\n                (\"but received \" + x.rank + \".\"));\n        }\n        var y = preprocessConv2DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new errors_1.NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.fused.conv2d({\n            x: y,\n            filter: kernel,\n            strides: strides,\n            pad: padding === 'same' ? 'same' : 'valid',\n            dilations: dilationRate,\n            dataFormat: 'NHWC',\n            bias: bias,\n            activation: activation\n        });\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nexports.conv2dWithBiasActivation = conv2dWithBiasActivation;\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nfunction conv3d(x, kernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) { strides = [1, 1, 1]; }\n    if (padding === void 0) { padding = 'valid'; }\n    return tfjs_core_1.tidy(function () {\n        common_2.checkDataFormat(dataFormat);\n        return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n    });\n}\nexports.conv3d = conv3d;\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nfunction conv3dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) { strides = [1, 1, 1]; }\n    if (padding === void 0) { padding = 'valid'; }\n    return tfjs_core_1.tidy(function () {\n        if (dataFormat == null) {\n            dataFormat = common_1.imageDataFormat();\n        }\n        common_2.checkDataFormat(dataFormat);\n        if (x.rank !== 4 && x.rank !== 5) {\n            throw new errors_1.ValueError(\"conv3dWithBias expects input to be of rank 4 or 5, but received \" +\n                (x.rank + \".\"));\n        }\n        if (kernel.rank !== 4 && kernel.rank !== 5) {\n            throw new errors_1.ValueError(\"conv3dWithBias expects kernel to be of rank 4 or 5, but received \" +\n                (x.rank + \".\"));\n        }\n        var y = preprocessConv3DInput(x, dataFormat);\n        if (padding === 'causal') {\n            throw new errors_1.NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' +\n                'implemented yet.');\n        }\n        y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n        if (bias != null) {\n            y = K.biasAdd(y, bias);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n        }\n        return y;\n    });\n}\nexports.conv3dWithBias = conv3dWithBias;\n/**\n * Abstract convolution layer.\n */\nvar BaseConv = /** @class */ (function (_super) {\n    __extends(BaseConv, _super);\n    function BaseConv(rank, args) {\n        var _this = _super.call(this, args) || this;\n        _this.bias = null;\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        BaseConv.verifyArgs(args);\n        _this.rank = rank;\n        generic_utils.assertPositiveInteger(_this.rank, 'rank');\n        if (_this.rank !== 1 && _this.rank !== 2 && _this.rank !== 3) {\n            throw new errors_1.NotImplementedError(\"Convolution layer for rank other than 1, 2, or 3 (\" + _this.rank + \") is \" +\n                \"not implemented yet.\");\n        }\n        _this.kernelSize = conv_utils_1.normalizeArray(args.kernelSize, rank, 'kernelSize');\n        _this.strides = conv_utils_1.normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n        _this.padding = args.padding == null ? 'valid' : args.padding;\n        common_2.checkPaddingMode(_this.padding);\n        _this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        common_2.checkDataFormat(_this.dataFormat);\n        _this.activation = activations_1.getActivation(args.activation);\n        _this.useBias = args.useBias == null ? true : args.useBias;\n        _this.biasInitializer =\n            initializers_1.getInitializer(args.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.biasConstraint = constraints_1.getConstraint(args.biasConstraint);\n        _this.biasRegularizer = regularizers_1.getRegularizer(args.biasRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(args.activityRegularizer);\n        _this.dilationRate = conv_utils_1.normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n        if (_this.rank === 1 &&\n            (Array.isArray(_this.dilationRate) && _this.dilationRate.length !== 1)) {\n            throw new errors_1.ValueError(\"dilationRate must be a number or an array of a single number \" +\n                \"for 1D convolution, but received \" +\n                (\"\" + JSON.stringify(_this.dilationRate)));\n        }\n        else if (_this.rank === 2) {\n            if (typeof _this.dilationRate === 'number') {\n                _this.dilationRate = [_this.dilationRate, _this.dilationRate];\n            }\n            else if (_this.dilationRate.length !== 2) {\n                throw new errors_1.ValueError(\"dilationRate must be a number or array of two numbers for 2D \" +\n                    (\"convolution, but received \" + JSON.stringify(_this.dilationRate)));\n            }\n        }\n        else if (_this.rank === 3) {\n            if (typeof _this.dilationRate === 'number') {\n                _this.dilationRate =\n                    [_this.dilationRate, _this.dilationRate, _this.dilationRate];\n            }\n            else if (_this.dilationRate.length !== 3) {\n                throw new errors_1.ValueError(\"dilationRate must be a number or array of three numbers for 3D \" +\n                    (\"convolution, but received \" + JSON.stringify(_this.dilationRate)));\n            }\n        }\n        return _this;\n    }\n    BaseConv.verifyArgs = function (args) {\n        // Check config.kernelSize type and shape.\n        generic_utils.assert('kernelSize' in args, \"required key 'kernelSize' not in config\");\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n            throw new errors_1.ValueError(\"BaseConv expects config.kernelSize to be number or number[] with \" +\n                (\"length 1, 2, or 3, but received \" + JSON.stringify(args.kernelSize) + \".\"));\n        }\n    };\n    BaseConv.prototype.getConfig = function () {\n        var config = {\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return BaseConv;\n}(topology_1.Layer));\nexports.BaseConv = BaseConv;\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nvar Conv = /** @class */ (function (_super) {\n    __extends(Conv, _super);\n    function Conv(rank, args) {\n        var _this = _super.call(this, rank, args) || this;\n        _this.kernel = null;\n        Conv.verifyArgs(args);\n        _this.filters = args.filters;\n        generic_utils.assertPositiveInteger(_this.filters, 'filters');\n        _this.kernelInitializer = initializers_1.getInitializer(args.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.kernelConstraint = constraints_1.getConstraint(args.kernelConstraint);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(args.kernelRegularizer);\n        return _this;\n    }\n    Conv.prototype.build = function (inputShape) {\n        var _a;\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError(\"The channel dimension of the input should be defined. \" +\n                (\"Found \" + inputShape[channelAxis]));\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];\n        this.built = true;\n    };\n    Conv.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = types_utils_1.getExactlyOneTensor(inputs);\n            var outputs;\n            var biasValue = _this.bias == null ? null : _this.bias.read();\n            var fusedActivationName = generic_utils.mapActivationToFusedKernel(_this.activation.getClassName());\n            if (fusedActivationName != null && _this.rank === 2) {\n                outputs = conv2dWithBiasActivation(inputs, _this.kernel.read(), biasValue, _this.strides, _this.padding, _this.dataFormat, _this.dilationRate, fusedActivationName);\n            }\n            else {\n                if (_this.rank === 1) {\n                    outputs = conv1dWithBias(inputs, _this.kernel.read(), biasValue, _this.strides[0], _this.padding, _this.dataFormat, _this.dilationRate[0]);\n                }\n                else if (_this.rank === 2) {\n                    // TODO(cais): Move up to constructor.\n                    outputs = conv2dWithBiasActivation(inputs, _this.kernel.read(), biasValue, _this.strides, _this.padding, _this.dataFormat, _this.dilationRate);\n                }\n                else if (_this.rank === 3) {\n                    outputs = conv3dWithBias(inputs, _this.kernel.read(), biasValue, _this.strides, _this.padding, _this.dataFormat, _this.dilationRate);\n                }\n                else {\n                    throw new errors_1.NotImplementedError('convolutions greater than 3D are not implemented yet.');\n                }\n                if (_this.activation != null) {\n                    outputs = _this.activation.apply(outputs);\n                }\n            }\n            return outputs;\n        });\n    };\n    Conv.prototype.computeOutputShape = function (inputShape) {\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        var newSpace = [];\n        var space = (this.dataFormat === 'channelsLast') ?\n            inputShape.slice(1, inputShape.length - 1) :\n            inputShape.slice(2);\n        for (var i = 0; i < space.length; ++i) {\n            var newDim = conv_utils_1.convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate :\n                this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        var outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        }\n        else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    };\n    Conv.prototype.getConfig = function () {\n        var config = {\n            filters: this.filters,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    Conv.verifyArgs = function (args) {\n        // Check config.filters type, shape, and value.\n        if (!('filters' in args) || typeof args.filters !== 'number' ||\n            args.filters < 1) {\n            throw new errors_1.ValueError(\"Convolution layer expected config.filters to be a 'number' > 0 \" +\n                (\"but got \" + JSON.stringify(args.filters)));\n        }\n    };\n    return Conv;\n}(BaseConv));\nexports.Conv = Conv;\nvar Conv2D = /** @class */ (function (_super) {\n    __extends(Conv2D, _super);\n    function Conv2D(args) {\n        var _this = _super.call(this, 2, args) || this;\n        Conv2D.verifyArgs(args);\n        return _this;\n    }\n    Conv2D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        return config;\n    };\n    Conv2D.verifyArgs = function (args) {\n        // config.kernelSize must be a number or array of numbers.\n        if ((typeof args.kernelSize !== 'number') &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n            throw new errors_1.ValueError(\"Conv2D expects config.kernelSize to be number or number[] with \" +\n                (\"length 1 or 2, but received \" + JSON.stringify(args.kernelSize) + \".\"));\n        }\n    };\n    /** @nocollapse */\n    Conv2D.className = 'Conv2D';\n    return Conv2D;\n}(Conv));\nexports.Conv2D = Conv2D;\ntfjs_core_1.serialization.registerClass(Conv2D);\nvar Conv3D = /** @class */ (function (_super) {\n    __extends(Conv3D, _super);\n    function Conv3D(args) {\n        var _this = _super.call(this, 3, args) || this;\n        Conv3D.verifyArgs(args);\n        return _this;\n    }\n    Conv3D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        return config;\n    };\n    Conv3D.verifyArgs = function (args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number') {\n            if (!(Array.isArray(args.kernelSize) &&\n                (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n                throw new errors_1.ValueError(\"Conv3D expects config.kernelSize to be number or\" +\n                    (\" [number, number, number], but received \" + JSON.stringify(args.kernelSize) + \".\"));\n            }\n        }\n    };\n    /** @nocollapse */\n    Conv3D.className = 'Conv3D';\n    return Conv3D;\n}(Conv));\nexports.Conv3D = Conv3D;\ntfjs_core_1.serialization.registerClass(Conv3D);\nvar Conv2DTranspose = /** @class */ (function (_super) {\n    __extends(Conv2DTranspose, _super);\n    function Conv2DTranspose(args) {\n        var _this = _super.call(this, args) || this;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];\n        if (_this.padding !== 'same' && _this.padding !== 'valid') {\n            throw new errors_1.ValueError(\"Conv2DTranspose currently supports only padding modes 'same' \" +\n                (\"and 'valid', but received padding mode \" + _this.padding));\n        }\n        return _this;\n    }\n    Conv2DTranspose.prototype.build = function (inputShape) {\n        var _a;\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        if (inputShape.length !== 4) {\n            throw new errors_1.ValueError('Input should have rank 4; Received input shape: ' +\n                JSON.stringify(inputShape));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError('The channel dimension of the inputs should be defined. ' +\n                'Found `None`.');\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n        this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        // Set input spec.\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: 4, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];\n        this.built = true;\n    };\n    Conv2DTranspose.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfc.tidy(function () {\n            var input = types_utils_1.getExactlyOneTensor(inputs);\n            if (input.shape.length !== 4) {\n                throw new errors_1.ValueError(\"Conv2DTranspose.call() expects input tensor to be rank-4, but \" +\n                    (\"received a tensor of rank-\" + input.shape.length));\n            }\n            var inputShape = input.shape;\n            var batchSize = inputShape[0];\n            var hAxis;\n            var wAxis;\n            if (_this.dataFormat === 'channelsFirst') {\n                hAxis = 2;\n                wAxis = 3;\n            }\n            else {\n                hAxis = 1;\n                wAxis = 2;\n            }\n            var height = inputShape[hAxis];\n            var width = inputShape[wAxis];\n            var kernelH = _this.kernelSize[0];\n            var kernelW = _this.kernelSize[1];\n            var strideH = _this.strides[0];\n            var strideW = _this.strides[1];\n            // Infer the dynamic output shape.\n            var outHeight = conv_utils_1.deconvLength(height, strideH, kernelH, _this.padding);\n            var outWidth = conv_utils_1.deconvLength(width, strideW, kernelW, _this.padding);\n            // Porting Note: We don't branch based on `this.dataFormat` here,\n            // because\n            //   the tjfs-core function `conv2dTranspose` called below always\n            //   assumes channelsLast.\n            var outputShape = [batchSize, outHeight, outWidth, _this.filters];\n            if (_this.dataFormat !== 'channelsLast') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n            }\n            var outputs = tfc.conv2dTranspose(input, _this.kernel.read(), outputShape, _this.strides, _this.padding);\n            if (_this.dataFormat !== 'channelsLast') {\n                outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n            }\n            if (_this.bias != null) {\n                outputs =\n                    K.biasAdd(outputs, _this.bias.read(), _this.dataFormat);\n            }\n            if (_this.activation != null) {\n                outputs = _this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    };\n    Conv2DTranspose.prototype.computeOutputShape = function (inputShape) {\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        var outputShape = inputShape.slice();\n        var channelAxis;\n        var heightAxis;\n        var widthAxis;\n        if (this.dataFormat === 'channelsFirst') {\n            channelAxis = 1;\n            heightAxis = 2;\n            widthAxis = 3;\n        }\n        else {\n            channelAxis = 3;\n            heightAxis = 1;\n            widthAxis = 2;\n        }\n        var kernelH = this.kernelSize[0];\n        var kernelW = this.kernelSize[1];\n        var strideH = this.strides[0];\n        var strideW = this.strides[1];\n        outputShape[channelAxis] = this.filters;\n        outputShape[heightAxis] =\n            conv_utils_1.deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n        outputShape[widthAxis] =\n            conv_utils_1.deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n        return outputShape;\n    };\n    Conv2DTranspose.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['dilationRate'];\n        return config;\n    };\n    /** @nocollapse */\n    Conv2DTranspose.className = 'Conv2DTranspose';\n    return Conv2DTranspose;\n}(Conv2D));\nexports.Conv2DTranspose = Conv2DTranspose;\ntfjs_core_1.serialization.registerClass(Conv2DTranspose);\nvar SeparableConv = /** @class */ (function (_super) {\n    __extends(SeparableConv, _super);\n    function SeparableConv(rank, config) {\n        var _this = _super.call(this, rank, config) || this;\n        _this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n        _this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n        _this.depthwiseKernel = null;\n        _this.pointwiseKernel = null;\n        if (config.filters == null) {\n            throw new errors_1.ValueError('The `filters` configuration field is required by SeparableConv, ' +\n                'but is unspecified.');\n        }\n        if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n            config.kernelConstraint != null) {\n            throw new errors_1.ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n                'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n                'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n                'pointwiseRegularizer and pointwiseConstraint instead.');\n        }\n        if (config.padding != null && config.padding !== 'same' &&\n            config.padding !== 'valid') {\n            throw new errors_1.ValueError(\"SeparableConv\" + _this.rank + \"D supports only padding modes: \" +\n                (\"'same' and 'valid', but received \" + JSON.stringify(config.padding)));\n        }\n        _this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_DEPTHWISE_INITIALIZER);\n        _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);\n        _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);\n        _this.pointwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_POINTWISE_INITIALIZER);\n        _this.pointwiseRegularizer = regularizers_1.getRegularizer(config.pointwiseRegularizer);\n        _this.pointwiseConstraint = constraints_1.getConstraint(config.pointwiseConstraint);\n        return _this;\n    }\n    SeparableConv.prototype.build = function (inputShape) {\n        var _a;\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        if (inputShape.length < this.rank + 2) {\n            throw new errors_1.ValueError(\"Inputs to SeparableConv\" + this.rank + \"D should have rank \" +\n                (this.rank + 2 + \", but received input shape: \") +\n                (\"\" + JSON.stringify(inputShape)));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new errors_1.ValueError(\"The channel dimension of the inputs should be defined, \" +\n                (\"but found \" + JSON.stringify(inputShape[channelAxis])));\n        }\n        var inputDim = inputShape[channelAxis];\n        var depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n        var pointwiseKernelShape = [];\n        for (var i = 0; i < this.rank; ++i) {\n            pointwiseKernelShape.push(1);\n        }\n        pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n        var trainable = true;\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n        this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.inputSpec =\n            [new topology_1.InputSpec({ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) })];\n        this.built = true;\n    };\n    SeparableConv.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = types_utils_1.getExactlyOneTensor(inputs);\n            var output;\n            if (_this.rank === 1) {\n                throw new errors_1.NotImplementedError('1D separable convolution is not implemented yet.');\n            }\n            else if (_this.rank === 2) {\n                if (_this.dataFormat === 'channelsFirst') {\n                    inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n                }\n                output = tfc.separableConv2d(inputs, _this.depthwiseKernel.read(), _this.pointwiseKernel.read(), _this.strides, _this.padding, _this.dilationRate, 'NHWC');\n            }\n            if (_this.useBias) {\n                output = K.biasAdd(output, _this.bias.read(), _this.dataFormat);\n            }\n            if (_this.activation != null) {\n                output = _this.activation.apply(output);\n            }\n            if (_this.dataFormat === 'channelsFirst') {\n                output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n            }\n            return output;\n        });\n    };\n    SeparableConv.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['kernelInitializer'];\n        delete config['kernelRegularizer'];\n        delete config['kernelConstraint'];\n        config['depthwiseInitializer'] =\n            initializers_1.serializeInitializer(this.depthwiseInitializer);\n        config['pointwiseInitializer'] =\n            initializers_1.serializeInitializer(this.pointwiseInitializer);\n        config['depthwiseRegularizer'] =\n            regularizers_1.serializeRegularizer(this.depthwiseRegularizer);\n        config['pointwiseRegularizer'] =\n            regularizers_1.serializeRegularizer(this.pointwiseRegularizer);\n        config['depthwiseConstraint'] =\n            constraints_1.serializeConstraint(this.depthwiseConstraint);\n        config['pointwiseConstraint'] =\n            constraints_1.serializeConstraint(this.pointwiseConstraint);\n        return config;\n    };\n    /** @nocollapse */\n    SeparableConv.className = 'SeparableConv';\n    return SeparableConv;\n}(Conv));\nexports.SeparableConv = SeparableConv;\nvar SeparableConv2D = /** @class */ (function (_super) {\n    __extends(SeparableConv2D, _super);\n    function SeparableConv2D(args) {\n        return _super.call(this, 2, args) || this;\n    }\n    /** @nocollapse */\n    SeparableConv2D.className = 'SeparableConv2D';\n    return SeparableConv2D;\n}(SeparableConv));\nexports.SeparableConv2D = SeparableConv2D;\ntfjs_core_1.serialization.registerClass(SeparableConv2D);\nvar Conv1D = /** @class */ (function (_super) {\n    __extends(Conv1D, _super);\n    function Conv1D(args) {\n        var _this = _super.call(this, 1, args) || this;\n        Conv1D.verifyArgs(args);\n        _this.inputSpec = [{ ndim: 3 }];\n        return _this;\n    }\n    Conv1D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    };\n    Conv1D.verifyArgs = function (args) {\n        // config.kernelSize must be a number or array of numbers.\n        if (typeof args.kernelSize !== 'number' &&\n            !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n            throw new errors_1.ValueError(\"Conv1D expects config.kernelSize to be number or number[] with \" +\n                (\"length 1, but received \" + JSON.stringify(args.kernelSize) + \".\"));\n        }\n    };\n    /** @nocollapse */\n    Conv1D.className = 'Conv1D';\n    return Conv1D;\n}(Conv));\nexports.Conv1D = Conv1D;\ntfjs_core_1.serialization.registerClass(Conv1D);\nvar Cropping2D = /** @class */ (function (_super) {\n    __extends(Cropping2D, _super);\n    function Cropping2D(args) {\n        var _this = _super.call(this, args) || this;\n        if (typeof args.cropping === 'number') {\n            _this.cropping =\n                [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n        }\n        else if (typeof args.cropping[0] === 'number') {\n            _this.cropping = [\n                [args.cropping[0], args.cropping[0]],\n                [args.cropping[1], args.cropping[1]]\n            ];\n        }\n        else {\n            _this.cropping = args.cropping;\n        }\n        _this.dataFormat =\n            args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n        _this.inputSpec = [{ ndim: 4 }];\n        return _this;\n    }\n    Cropping2D.prototype.computeOutputShape = function (inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            return [\n                inputShape[0], inputShape[1],\n                inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n            ];\n        }\n        else {\n            return [\n                inputShape[0],\n                inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n                inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n            ];\n        }\n    };\n    Cropping2D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = types_utils_1.getExactlyOneTensor(inputs);\n            if (_this.dataFormat === 'channelsLast') {\n                var hSliced = K.sliceAlongAxis(inputs, _this.cropping[0][0], inputs.shape[1] - _this.cropping[0][0] - _this.cropping[0][1], 2);\n                return K.sliceAlongAxis(hSliced, _this.cropping[1][0], inputs.shape[2] - _this.cropping[1][1] - _this.cropping[1][0], 3);\n            }\n            else {\n                var hSliced = K.sliceAlongAxis(inputs, _this.cropping[0][0], inputs.shape[2] - _this.cropping[0][0] - _this.cropping[0][1], 3);\n                return K.sliceAlongAxis(hSliced, _this.cropping[1][0], inputs.shape[3] - _this.cropping[1][1] - _this.cropping[1][0], 4);\n            }\n        });\n    };\n    Cropping2D.prototype.getConfig = function () {\n        var config = { cropping: this.cropping, dataFormat: this.dataFormat };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    /** @nocollapse */\n    Cropping2D.className = 'Cropping2D';\n    return Cropping2D;\n}(topology_1.Layer));\nexports.Cropping2D = Cropping2D;\ntfjs_core_1.serialization.registerClass(Cropping2D);\nvar UpSampling2D = /** @class */ (function (_super) {\n    __extends(UpSampling2D, _super);\n    function UpSampling2D(args) {\n        var _this = _super.call(this, args) || this;\n        _this.DEFAULT_SIZE = [2, 2];\n        _this.inputSpec = [{ ndim: 4 }];\n        _this.size = args.size == null ? _this.DEFAULT_SIZE : args.size;\n        _this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        return _this;\n    }\n    UpSampling2D.prototype.computeOutputShape = function (inputShape) {\n        if (this.dataFormat === 'channelsFirst') {\n            var height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n            var width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n            return [inputShape[0], inputShape[1], height, width];\n        }\n        else {\n            var height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n            var width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n            return [inputShape[0], height, width, inputShape[3]];\n        }\n    };\n    UpSampling2D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfc.tidy(function () {\n            var input = types_utils_1.getExactlyOneTensor(inputs);\n            var inputShape = input.shape;\n            if (_this.dataFormat === 'channelsFirst') {\n                input = tfc.transpose(input, [0, 2, 3, 1]);\n                var height = _this.size[0] * inputShape[2];\n                var width = _this.size[1] * inputShape[3];\n                var resized = input.resizeNearestNeighbor([height, width]);\n                return tfc.transpose(resized, [0, 3, 1, 2]);\n            }\n            else {\n                var height = _this.size[0] * inputShape[1];\n                var width = _this.size[1] * inputShape[2];\n                return input.resizeNearestNeighbor([height, width]);\n            }\n        });\n    };\n    UpSampling2D.prototype.getConfig = function () {\n        var config = { size: this.size, dataFormat: this.dataFormat };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    /** @nocollapse */\n    UpSampling2D.className = 'UpSampling2D';\n    return UpSampling2D;\n}(topology_1.Layer));\nexports.UpSampling2D = UpSampling2D;\ntfjs_core_1.serialization.registerClass(UpSampling2D);\n"},"sourceMaps":{"js":{"version":3,"file":"convolutional.js","sourceRoot":"","sources":["../../src/layers/convolutional.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {fused, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat, dilationRate?: [number, number],\n    activation: fused.Activation = null): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y as Tensor3D | Tensor4D,\n      filter: kernel as Tensor4D,\n      strides: strides as [number, number],\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(\n    x: Tensor, kernel: Tensor, strides = [1, 1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv3dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv3d(\n        y as Tensor4D | tfc.Tensor<tfc.Rank.R5>,\n        kernel as tfc.Tensor<tfc.Rank.R5>, strides as [number, number, number],\n        padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport declare interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number]|[number, number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D,\n * Conv3D).\n */\nexport declare interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1, 2, or 3 (${\n              this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate =\n            [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(\n            `dilationRate must be a number or array of three numbers for 3D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1, 2, or 3, but received ${\n              JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(\n                                            this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number],\n            fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides[0],\n              this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number]);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number, number]);\n        } else {\n          throw new NotImplementedError(\n              'convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\nexport class Conv2D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv2D);\n\nexport class Conv3D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv3D';\n  constructor(args: ConvLayerArgs) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) &&\n            (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(\n            `Conv3D expects config.kernelSize to be number or` +\n            ` [number, number, number], but received ${\n                JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\nserialization.registerClass(Conv3D);\n\nexport class Conv2DTranspose extends Conv2D {\n  /** @nocollapse */\n  static className = 'Conv2DTranspose';\n  inputSpec: InputSpec[];\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport declare interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\nexport class SeparableConv extends Conv {\n  /** @nocollapse */\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\nexport class SeparableConv2D extends SeparableConv {\n  /** @nocollapse */\n  static className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\nexport class Conv1D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport declare interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 list of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class Cropping2D extends Layer {\n  /** @nocollapse */\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    } else {\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    }\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport declare interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class UpSampling2D extends Layer {\n  /** @nocollapse */\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = input.resizeNearestNeighbor([height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return input.resizeNearestNeighbor([height, width]);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {size: this.size, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n"]}},"error":null,"hash":"d3fe028592217949a7b3529fd44e33c9","cacheData":{"env":{}}}