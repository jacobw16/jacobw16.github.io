{"id":"node_modules/@tensorflow/tfjs-layers/dist/constraints.js","dependencies":[{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\constraints.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\src\\constraints.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\package.json","includedInParent":true,"mtime":1582861032163},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1581030261368},{"name":"@tensorflow/tfjs-core","loc":{"line":27,"column":26},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\constraints.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"./backend/common","loc":{"line":28,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\constraints.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\common.js"},{"name":"./utils/generic_utils","loc":{"line":29,"column":30},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\constraints.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\generic_utils.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* Original source: keras/contraints.py */\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar common_1 = require(\"./backend/common\");\nvar generic_utils_1 = require(\"./utils/generic_utils\");\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n    return tfjs_core_1.tidy(function () { return tfc.sqrt(tfc.sum(tfc.mulStrict(w, w), axis, true)); });\n}\n/**\n * Base class for functions that impose constraints on weight values\n */\n/**\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nvar Constraint = /** @class */ (function (_super) {\n    __extends(Constraint, _super);\n    function Constraint() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Constraint.prototype.getConfig = function () {\n        return {};\n    };\n    return Constraint;\n}(tfjs_core_1.serialization.Serializable));\nexports.Constraint = Constraint;\nvar MaxNorm = /** @class */ (function (_super) {\n    __extends(MaxNorm, _super);\n    function MaxNorm(args) {\n        var _this = _super.call(this) || this;\n        _this.defaultMaxValue = 2;\n        _this.defaultAxis = 0;\n        _this.maxValue =\n            args.maxValue != null ? args.maxValue : _this.defaultMaxValue;\n        _this.axis = args.axis != null ? args.axis : _this.defaultAxis;\n        return _this;\n    }\n    MaxNorm.prototype.apply = function (w) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var norms = calcL2Norms(w, _this.axis);\n            var desired = tfc.clipByValue(norms, 0, _this.maxValue);\n            return tfc.mul(w, tfc.div(desired, tfc.add(common_1.epsilon(), norms)));\n        });\n    };\n    MaxNorm.prototype.getConfig = function () {\n        return { maxValue: this.maxValue, axis: this.axis };\n    };\n    /** @nocollapse */\n    MaxNorm.className = 'MaxNorm';\n    return MaxNorm;\n}(Constraint));\nexports.MaxNorm = MaxNorm;\ntfjs_core_1.serialization.registerClass(MaxNorm);\nvar UnitNorm = /** @class */ (function (_super) {\n    __extends(UnitNorm, _super);\n    function UnitNorm(args) {\n        var _this = _super.call(this) || this;\n        _this.defaultAxis = 0;\n        _this.axis = args.axis != null ? args.axis : _this.defaultAxis;\n        return _this;\n    }\n    UnitNorm.prototype.apply = function (w) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () { return tfc.div(w, tfc.add(common_1.epsilon(), calcL2Norms(w, _this.axis))); });\n    };\n    UnitNorm.prototype.getConfig = function () {\n        return { axis: this.axis };\n    };\n    /** @nocollapse */\n    UnitNorm.className = 'UnitNorm';\n    return UnitNorm;\n}(Constraint));\nexports.UnitNorm = UnitNorm;\ntfjs_core_1.serialization.registerClass(UnitNorm);\nvar NonNeg = /** @class */ (function (_super) {\n    __extends(NonNeg, _super);\n    function NonNeg() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NonNeg.prototype.apply = function (w) {\n        return tfc.relu(w);\n    };\n    /** @nocollapse */\n    NonNeg.className = 'NonNeg';\n    return NonNeg;\n}(Constraint));\nexports.NonNeg = NonNeg;\ntfjs_core_1.serialization.registerClass(NonNeg);\nvar MinMaxNorm = /** @class */ (function (_super) {\n    __extends(MinMaxNorm, _super);\n    function MinMaxNorm(args) {\n        var _this = _super.call(this) || this;\n        _this.defaultMinValue = 0.0;\n        _this.defaultMaxValue = 1.0;\n        _this.defaultRate = 1.0;\n        _this.defaultAxis = 0;\n        _this.minValue =\n            args.minValue != null ? args.minValue : _this.defaultMinValue;\n        _this.maxValue =\n            args.maxValue != null ? args.maxValue : _this.defaultMaxValue;\n        _this.rate = args.rate != null ? args.rate : _this.defaultRate;\n        _this.axis = args.axis != null ? args.axis : _this.defaultAxis;\n        return _this;\n    }\n    MinMaxNorm.prototype.apply = function (w) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var norms = calcL2Norms(w, _this.axis);\n            var desired = tfc.add(tfc.mul(_this.rate, tfc.clipByValue(norms, _this.minValue, _this.maxValue)), tfc.mul(1.0 - _this.rate, norms));\n            return tfc.mul(w, tfc.div(desired, tfc.add(common_1.epsilon(), norms)));\n        });\n    };\n    MinMaxNorm.prototype.getConfig = function () {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    };\n    /** @nocollapse */\n    MinMaxNorm.className = 'MinMaxNorm';\n    return MinMaxNorm;\n}(Constraint));\nexports.MinMaxNorm = MinMaxNorm;\ntfjs_core_1.serialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nfunction serializeConstraint(constraint) {\n    return generic_utils_1.serializeKerasObject(constraint);\n}\nexports.serializeConstraint = serializeConstraint;\nfunction deserializeConstraint(config, customObjects) {\n    if (customObjects === void 0) { customObjects = {}; }\n    return generic_utils_1.deserializeKerasObject(config, tfjs_core_1.serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexports.deserializeConstraint = deserializeConstraint;\nfunction getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        var className = identifier in exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        var config = { className: className, config: {} };\n        return deserializeConstraint(config);\n    }\n    else if (identifier instanceof Constraint) {\n        return identifier;\n    }\n    else {\n        return deserializeConstraint(identifier);\n    }\n}\nexports.getConstraint = getConstraint;\n"},"sourceMaps":{"js":{"version":3,"file":"constraints.js","sourceRoot":"","sources":["../src/constraints.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport {epsilon} from './backend/common';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mulStrict(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n */\n/**\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class MaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * [rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class UnitNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\nexport class NonNeg extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n"]}},"error":null,"hash":"2b22c6f95644957c4488131b942f1c28","cacheData":{"env":{}}}