{"id":"node_modules/@tensorflow/tfjs-layers/dist/engine/training_utils.js","dependencies":[{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\training_utils.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\src\\engine\\training_utils.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\package.json","includedInParent":true,"mtime":1582861032163},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1581030261368},{"name":"@tensorflow/tfjs-core","loc":{"line":47,"column":26},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\training_utils.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n    var numOutputs = outputNames.length;\n    if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n        return outputNames.map(function (name) { return null; });\n    }\n    if (numOutputs === 1) {\n        if (Array.isArray(xWeight) && xWeight.length === 1) {\n            return xWeight;\n        }\n        else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n            return [xWeight[outputNames[0]]];\n        }\n        else {\n            return [xWeight];\n        }\n    }\n    if (Array.isArray(xWeight)) {\n        if (xWeight.length !== numOutputs) {\n            throw new Error(\"Provided \" + weightType + \" is an array of \" + xWeight.length + \" \" +\n                (\"element(s), but the model has \" + numOutputs + \" outputs. \") +\n                \"Make sure a set of weights is provided for each model output.\");\n        }\n        return xWeight;\n    }\n    else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n        typeof xWeight[Object.keys(xWeight)[0]] ===\n            'object') {\n        var output_1 = [];\n        outputNames.forEach(function (outputName) {\n            if (outputName in xWeight) {\n                output_1.push(xWeight[outputName]);\n            }\n            else {\n                output_1.push(null);\n            }\n        });\n        return output_1;\n    }\n    else {\n        throw new Error(\"The model has multiple (\" + numOutputs + \") outputs, \" +\n            (\"so \" + weightType + \" must be either an array with \") +\n            (numOutputs + \" elements or an object with \" + outputNames + \" keys. \") +\n            (\"Provided \" + weightType + \" not understood: \" + JSON.stringify(xWeight)));\n    }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nfunction standardizeClassWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexports.standardizeClassWeights = standardizeClassWeights;\nfunction standardizeSampleWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\nexports.standardizeSampleWeights = standardizeSampleWeights;\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nfunction standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n    return __awaiter(this, void 0, void 0, function () {\n        var yClasses, yClassIndices, _a, _b, classSampleWeight_1;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    if (sampleWeight != null || sampleWeightMode != null) {\n                        // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n                        // string.\n                        throw new Error('Support sampleWeight is not implemented yet');\n                    }\n                    if (!(classWeight != null)) return [3 /*break*/, 2];\n                    yClasses = tfjs_core_1.tidy(function () {\n                        if (y.shape.length === 1) {\n                            // Assume class indices.\n                            return y.clone();\n                        }\n                        else if (y.shape.length === 2) {\n                            if (y.shape[1] > 1) {\n                                // Assume one-hot encoding of classes.\n                                var axis = 1;\n                                return y.argMax(axis);\n                            }\n                            else if (y.shape[1] === 1) {\n                                // Class index.\n                                return y.reshape([y.shape[0]]);\n                            }\n                            else {\n                                throw new Error(\"Encountered unexpected last-dimension size (\" + y.shape[1] + \") \" +\n                                    \"during handling of class weights. The size is expected to be \" +\n                                    \">= 1.\");\n                            }\n                        }\n                        else {\n                            throw new Error(\"Unexpected rank of target (y) tensor (\" + y.rank + \") during \" +\n                                \"handling of class weights. The rank is expected to be 1 or 2.\");\n                        }\n                    });\n                    _b = (_a = Array).from;\n                    return [4 /*yield*/, yClasses.data()];\n                case 1:\n                    yClassIndices = _b.apply(_a, [_c.sent()]);\n                    tfjs_core_1.dispose(yClasses);\n                    classSampleWeight_1 = [];\n                    yClassIndices.forEach(function (classIndex) {\n                        if (classWeight[classIndex] == null) {\n                            throw new Error(\"classWeight must contain all classes in the training data. \" +\n                                (\"The class \" + classIndex + \" exists in the data but not in \") +\n                                \"classWeight\");\n                        }\n                        else {\n                            classSampleWeight_1.push(classWeight[classIndex]);\n                        }\n                    });\n                    return [2 /*return*/, tfjs_core_1.tensor1d(classSampleWeight_1, 'float32')];\n                case 2: return [2 /*return*/, null];\n            }\n        });\n    });\n}\nexports.standardizeWeights = standardizeWeights;\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nfunction computeWeightedLoss(losses, sampleWeights) {\n    return tfjs_core_1.mul(losses, sampleWeights);\n}\nexports.computeWeightedLoss = computeWeightedLoss;\n"},"sourceMaps":{"js":{"version":3,"file":"training_utils.js","sourceRoot":"","sources":["../../src/engine/training_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, mul, Tensor, Tensor1D, tensor1d, tidy} from '@tensorflow/tfjs-core';\n\n/**\n * For multi-class classification problems, this object is designed to store a\n * mapping from class index to the \"weight\" of the class, where higher weighted\n * classes have larger impact on loss, accuracy, and other metrics.\n *\n * This is useful for cases in which you want the model to \"pay more attention\"\n * to examples from an under-represented class, e.g., in unbalanced datasets.\n */\nexport type ClassWeight = {\n  [classIndex: number]: number\n};\n\n/**\n * Class weighting for a model with multiple outputs.\n *\n * This object maps each output name to a class-weighting object.\n */\nexport type ClassWeightMap = {\n  [outputName: string]: ClassWeight\n};\n\nfunction standardizeSampleOrClassWeights(\n    xWeight: ClassWeight|ClassWeight[]|ClassWeightMap, outputNames: string[],\n    weightType: 'sampleWeight'|'classWeight'): ClassWeight[] {\n  const numOutputs = outputNames.length;\n  if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n    return outputNames.map(name => null);\n  }\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [(xWeight as ClassWeightMap)[outputNames[0]]];\n    } else {\n      return [xWeight as ClassWeight];\n    }\n  }\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\n          `Provided ${weightType} is an array of ${xWeight.length} ` +\n          `element(s), but the model has ${numOutputs} outputs. ` +\n          `Make sure a set of weights is provided for each model output.`);\n    }\n    return xWeight;\n  } else if (\n      typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n      typeof (xWeight as ClassWeightMap)[Object.keys(xWeight)[0]] ===\n          'object') {\n    const output: ClassWeight[] = [];\n    outputNames.forEach(outputName => {\n      if (outputName in xWeight) {\n        output.push((xWeight as ClassWeightMap)[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\n        `The model has multiple (${numOutputs}) outputs, ` +\n        `so ${weightType} must be either an array with ` +\n        `${numOutputs} elements or an object with ${outputNames} keys. ` +\n        `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n  }\n}\n\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'classWeight');\n}\n\nexport function standardizeSampleWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'sampleWeight');\n}\n\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(\n    y: Tensor, sampleWeight?: Tensor, classWeight?: ClassWeight,\n    sampleWeightMode?: 'temporal'): Promise<Tensor> {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n    // string.\n    throw new Error('Support sampleWeight is not implemented yet');\n  }\n\n  if (classWeight != null) {\n    // Apply class weights per sample.\n    const yClasses: Tensor1D = tidy(() => {\n      if (y.shape.length === 1) {\n        // Assume class indices.\n        return y.clone() as Tensor1D;\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          // Assume one-hot encoding of classes.\n          const axis = 1;\n          return y.argMax(axis);\n        } else if (y.shape[1] === 1) {\n          // Class index.\n          return y.reshape([y.shape[0]]);\n        } else {\n          throw new Error(\n              `Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n              `during handling of class weights. The size is expected to be ` +\n              `>= 1.`);\n        }\n      } else {\n        throw new Error(\n            `Unexpected rank of target (y) tensor (${y.rank}) during ` +\n            `handling of class weights. The rank is expected to be 1 or 2.`);\n      }\n    });\n\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight: number[] = [];\n    yClassIndices.forEach(classIndex => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(\n            `classWeight must contain all classes in the training data. ` +\n            `The class ${classIndex} exists in the data but not in ` +\n            `classWeight`);\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n\n    return tensor1d(classSampleWeight, 'float32');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses: Tensor, sampleWeights: Tensor) {\n  return mul(losses, sampleWeights);\n}\n"]}},"error":null,"hash":"f0226ac37ef159e55b3f87f2d58da8e9","cacheData":{"env":{}}}