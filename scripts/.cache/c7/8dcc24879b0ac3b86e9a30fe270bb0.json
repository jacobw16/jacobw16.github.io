{"id":"node_modules/@tensorflow/tfjs-layers/dist/metrics.js","dependencies":[{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\metrics.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\src\\metrics.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\package.json","includedInParent":true,"mtime":1581896610560},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1581030261368},{"name":"@tensorflow/tfjs-core","loc":{"line":16,"column":26},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\metrics.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"./backend/tfjs_backend","loc":{"line":17,"column":16},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\metrics.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\tfjs_backend.js"},{"name":"./errors","loc":{"line":18,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\metrics.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\errors.js"},{"name":"./losses","loc":{"line":21,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\metrics.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\losses.js"},{"name":"./utils/generic_utils","loc":{"line":22,"column":19},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\metrics.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\generic_utils.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Built-in metrics.\n */\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar K = require(\"./backend/tfjs_backend\");\nvar errors_1 = require(\"./errors\");\nvar losses_1 = require(\"./losses\");\nvar losses_2 = require(\"./losses\");\nvar losses_3 = require(\"./losses\");\nvar util = require(\"./utils/generic_utils\");\nfunction binaryAccuracy(yTrue, yPred) {\n    return tfjs_core_1.tidy(function () {\n        var threshold = tfc.mul(.5, tfc.onesLike(yPred));\n        var yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n    });\n}\nexports.binaryAccuracy = binaryAccuracy;\nfunction categoricalAccuracy(yTrue, yPred) {\n    return tfjs_core_1.tidy(function () { return K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'); });\n}\nexports.categoricalAccuracy = categoricalAccuracy;\nfunction truePositives(yTrue, yPred) {\n    return tfjs_core_1.tidy(function () {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n    });\n}\nfunction falseNegatives(yTrue, yPred) {\n    return tfjs_core_1.tidy(function () {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n    });\n}\nfunction falsePositives(yTrue, yPred) {\n    return tfjs_core_1.tidy(function () {\n        return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n    });\n}\nfunction precision(yTrue, yPred) {\n    return tfjs_core_1.tidy(function () {\n        var tp = truePositives(yTrue, yPred);\n        var fp = falsePositives(yTrue, yPred);\n        var denominator = tp.add(fp);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexports.precision = precision;\nfunction recall(yTrue, yPred) {\n    return tfjs_core_1.tidy(function () {\n        var tp = truePositives(yTrue, yPred);\n        var fn = falseNegatives(yTrue, yPred);\n        var denominator = tp.add(fn);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexports.recall = recall;\nfunction binaryCrossentropy(yTrue, yPred) {\n    return losses_2.binaryCrossentropy(yTrue, yPred);\n}\nexports.binaryCrossentropy = binaryCrossentropy;\nfunction sparseCategoricalAccuracy(yTrue, yPred) {\n    if (yTrue.rank === yPred.rank) {\n        yTrue = yTrue.squeeze([yTrue.rank - 1]);\n    }\n    yPred = yPred.argMax(-1);\n    if (yPred.dtype !== yTrue.dtype) {\n        yPred = yPred.asType(yTrue.dtype);\n    }\n    return tfc.equal(yTrue, yPred).asType('float32');\n}\nexports.sparseCategoricalAccuracy = sparseCategoricalAccuracy;\nfunction topKCategoricalAccuracy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.topKCategoricalAccuracy = topKCategoricalAccuracy;\nfunction sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.sparseTopKCategoricalAccuracy = sparseTopKCategoricalAccuracy;\n// Aliases.\nexports.mse = losses_1.meanSquaredError;\nexports.MSE = losses_1.meanSquaredError;\nexports.mae = losses_1.meanAbsoluteError;\nexports.MAE = losses_1.meanAbsoluteError;\nexports.mape = losses_1.meanAbsolutePercentageError;\nexports.MAPE = losses_1.meanAbsolutePercentageError;\nexports.categoricalCrossentropy = losses_1.categoricalCrossentropy;\nexports.cosine = losses_1.cosineProximity;\nexports.sparseCategoricalCrossentropy = losses_1.sparseCategoricalCrossentropy;\n// TODO(cais, nielsene): Add serialize().\nexports.metricsMap = {\n    binaryAccuracy: binaryAccuracy,\n    categoricalAccuracy: categoricalAccuracy,\n    precision: precision,\n    categoricalCrossentropy: exports.categoricalCrossentropy,\n    sparseCategoricalCrossentropy: exports.sparseCategoricalCrossentropy,\n    mse: exports.mse,\n    MSE: exports.MSE,\n    mae: exports.mae,\n    MAE: exports.MAE,\n    mape: exports.mape,\n    MAPE: exports.MAPE,\n    cosine: exports.cosine\n};\nfunction get(identifier) {\n    if (typeof identifier === 'string' && identifier in exports.metricsMap) {\n        return exports.metricsMap[identifier];\n    }\n    else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    }\n    else {\n        throw new errors_1.ValueError(\"Unknown metric \" + identifier);\n    }\n}\nexports.get = get;\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nfunction getLossOrMetricName(fn) {\n    util.assert(fn !== null, \"Unknown LossOrMetricFn \" + fn);\n    if (typeof fn === 'string') {\n        return fn;\n    }\n    else {\n        var fnName = void 0;\n        for (var _i = 0, _a = Object.keys(losses_3.lossesMap); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (losses_3.lossesMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        for (var _b = 0, _c = Object.keys(exports.metricsMap); _b < _c.length; _b++) {\n            var key = _c[_b];\n            if (exports.metricsMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        return fn.name;\n    }\n}\nexports.getLossOrMetricName = getLossOrMetricName;\n"},"sourceMaps":{"js":{"version":3,"file":"metrics.js","sourceRoot":"","sources":["../src/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Built-in metrics.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {NotImplementedError, ValueError} from './errors';\nimport {categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss} from './losses';\nimport {binaryCrossentropy as lossBinaryCrossentropy} from './losses';\nimport {lossesMap} from './losses';\nimport {LossOrMetricFn} from './types';\nimport * as util from './utils/generic_utils';\n\nexport function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\n\nexport function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(\n      () => K.cast(\n          tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\n\nfunction truePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n  });\n}\n\nfunction falseNegatives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n  });\n}\n\nfunction falsePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n  });\n}\n\nexport function precision(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n\n    const denominator = tp.add(fp);\n\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n        .cast('float32');\n  });\n}\n\nexport function recall(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n\n    const denominator = tp.add(fn);\n\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n        .cast('float32');\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\n\nexport function sparseCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = yTrue.squeeze([yTrue.rank - 1]);\n  }\n  yPred = yPred.argMax(-1);\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = yPred.asType(yTrue.dtype);\n  }\n  return tfc.equal(yTrue, yPred).asType('float32');\n}\n\nexport function topKCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\nexport function sparseTopKCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n\n// TODO(cais, nielsene): Add serialize().\n\nexport const metricsMap: {[functionName: string]: LossOrMetricFn} = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\n\nexport function get(identifier: string|LossOrMetricFn): LossOrMetricFn {\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn: string|LossOrMetricFn): string {\n  util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n  if (typeof fn === 'string') {\n    return fn;\n  } else {\n    let fnName;\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    return (fn as Function).name;\n  }\n}\n"]}},"error":null,"hash":"39533c172536c2386acb2e1b5925bee7","cacheData":{"env":{}}}