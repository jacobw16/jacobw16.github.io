{"id":"node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js","dependencies":[{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\pooling.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\package.json","includedInParent":true,"mtime":1581030063848},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1581030261368},{"name":"@tensorflow/tfjs-core","loc":{"line":29,"column":26},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"../backend/common","loc":{"line":30,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\common.js"},{"name":"../backend/tfjs_backend","loc":{"line":31,"column":16},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\backend\\tfjs_backend.js"},{"name":"../common","loc":{"line":32,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\common.js"},{"name":"../engine/topology","loc":{"line":34,"column":25},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\topology.js"},{"name":"../errors","loc":{"line":35,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\errors.js"},{"name":"../utils/conv_utils","loc":{"line":36,"column":27},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\conv_utils.js"},{"name":"../utils/generic_utils","loc":{"line":37,"column":30},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\generic_utils.js"},{"name":"../utils/types_utils","loc":{"line":38,"column":28},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\types_utils.js"},{"name":"./convolutional","loc":{"line":39,"column":30},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\pooling.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\layers\\convolutional.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar common_1 = require(\"../backend/common\");\nvar K = require(\"../backend/tfjs_backend\");\nvar common_2 = require(\"../common\");\nvar topology_1 = require(\"../engine/topology\");\nvar topology_2 = require(\"../engine/topology\");\nvar errors_1 = require(\"../errors\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar generic_utils_1 = require(\"../utils/generic_utils\");\nvar types_utils_1 = require(\"../utils/types_utils\");\nvar convolutional_1 = require(\"./convolutional\");\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nfunction pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tfjs_core_1.tidy(function () {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPoolMode(poolMode);\n        common_2.checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = common_1.imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n        // dataFormat as an input argument.\n        x = convolutional_1.preprocessConv2DInput(x, dataFormat); // x is NHWC after preprocessing.\n        var y;\n        var paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            // TODO(cais): Rank check?\n            y = tfc.maxPool(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            // TODO(cais): Check the dtype and rank of x and give clear error message\n            //   if those are incorrect.\n            y = tfc.avgPool(\n            // TODO(cais): Rank check?\n            x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n        return y;\n    });\n}\nexports.pool2d = pool2d;\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nfunction pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tfjs_core_1.tidy(function () {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPoolMode(poolMode);\n        common_2.checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = common_1.imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // x is NDHWC after preprocessing.\n        x = convolutional_1.preprocessConv3DInput(x, dataFormat);\n        var y;\n        var paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.\n        }\n        return y;\n    });\n}\nexports.pool3d = pool3d;\n/**\n * Abstract class for different pooling 1D layers.\n */\nvar Pooling1D = /** @class */ (function (_super) {\n    __extends(Pooling1D, _super);\n    /**\n     *\n     * @param args Parameters for the Pooling layer.\n     *\n     * config.poolSize defaults to 2.\n     */\n    function Pooling1D(args) {\n        var _this = this;\n        if (args.poolSize == null) {\n            args.poolSize = 2;\n        }\n        _this = _super.call(this, args) || this;\n        if (typeof args.poolSize === 'number') {\n            _this.poolSize = [args.poolSize];\n        }\n        else if (Array.isArray(args.poolSize) &&\n            args.poolSize.length === 1 &&\n            typeof args.poolSize[0] === 'number') {\n            _this.poolSize = args.poolSize;\n        }\n        else {\n            throw new errors_1.ValueError(\"poolSize for 1D convolutional layer must be a number or an \" +\n                \"Array of a single number, but received \" +\n                (\"\" + JSON.stringify(args.poolSize)));\n        }\n        generic_utils_1.assertPositiveInteger(_this.poolSize, 'poolSize');\n        if (args.strides == null) {\n            _this.strides = _this.poolSize;\n        }\n        else {\n            if (typeof args.strides === 'number') {\n                _this.strides = [args.strides];\n            }\n            else if (Array.isArray(args.strides) &&\n                args.strides.length === 1 &&\n                typeof args.strides[0] === 'number') {\n                _this.strides = args.strides;\n            }\n            else {\n                throw new errors_1.ValueError(\"strides for 1D convolutional layer must be a number or an \" +\n                    \"Array of a single number, but received \" +\n                    (\"\" + JSON.stringify(args.strides)));\n            }\n        }\n        generic_utils_1.assertPositiveInteger(_this.strides, 'strides');\n        _this.padding = args.padding == null ? 'valid' : args.padding;\n        common_2.checkPaddingMode(_this.padding);\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];\n        return _this;\n    }\n    Pooling1D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        var length = conv_utils_1.convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n        return [inputShape[0], length, inputShape[2]];\n    };\n    Pooling1D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            _this.invokeCallHook(inputs, kwargs);\n            // Add dummy last dimension.\n            inputs = K.expandDims(types_utils_1.getExactlyOneTensor(inputs), 2);\n            var output = _this.poolingFunction(types_utils_1.getExactlyOneTensor(inputs), [_this.poolSize[0], 1], [_this.strides[0], 1], _this.padding, 'channelsLast');\n            // Remove dummy last dimension.\n            return tfc.squeeze(output, [2]);\n        });\n    };\n    Pooling1D.prototype.getConfig = function () {\n        var config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Pooling1D;\n}(topology_2.Layer));\nexports.Pooling1D = Pooling1D;\nvar MaxPooling1D = /** @class */ (function (_super) {\n    __extends(MaxPooling1D, _super);\n    function MaxPooling1D(args) {\n        return _super.call(this, args) || this;\n    }\n    MaxPooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    };\n    /** @nocollapse */\n    MaxPooling1D.className = 'MaxPooling1D';\n    return MaxPooling1D;\n}(Pooling1D));\nexports.MaxPooling1D = MaxPooling1D;\ntfjs_core_1.serialization.registerClass(MaxPooling1D);\nvar AveragePooling1D = /** @class */ (function (_super) {\n    __extends(AveragePooling1D, _super);\n    function AveragePooling1D(args) {\n        return _super.call(this, args) || this;\n    }\n    AveragePooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    };\n    /** @nocollapse */\n    AveragePooling1D.className = 'AveragePooling1D';\n    return AveragePooling1D;\n}(Pooling1D));\nexports.AveragePooling1D = AveragePooling1D;\ntfjs_core_1.serialization.registerClass(AveragePooling1D);\n/**\n * Abstract class for different pooling 2D layers.\n */\nvar Pooling2D = /** @class */ (function (_super) {\n    __extends(Pooling2D, _super);\n    function Pooling2D(args) {\n        var _this = this;\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2];\n        }\n        _this = _super.call(this, args) || this;\n        _this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            _this.strides = _this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 2) {\n                throw new errors_1.ValueError(\"If the strides property of a 2D pooling layer is an Array, \" +\n                    \"it is expected to have a length of 2, but received length \" +\n                    (args.strides.length + \".\"));\n            }\n            _this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            _this.strides = [args.strides, args.strides];\n        }\n        generic_utils_1.assertPositiveInteger(_this.poolSize, 'poolSize');\n        generic_utils_1.assertPositiveInteger(_this.strides, 'strides');\n        _this.padding = args.padding == null ? 'valid' : args.padding;\n        _this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        common_2.checkDataFormat(_this.dataFormat);\n        common_2.checkPaddingMode(_this.padding);\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];\n        return _this;\n    }\n    Pooling2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        rows =\n            conv_utils_1.convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n        cols =\n            conv_utils_1.convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    };\n    Pooling2D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            _this.invokeCallHook(inputs, kwargs);\n            return _this.poolingFunction(types_utils_1.getExactlyOneTensor(inputs), _this.poolSize, _this.strides, _this.padding, _this.dataFormat);\n        });\n    };\n    Pooling2D.prototype.getConfig = function () {\n        var config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Pooling2D;\n}(topology_2.Layer));\nexports.Pooling2D = Pooling2D;\nvar MaxPooling2D = /** @class */ (function (_super) {\n    __extends(MaxPooling2D, _super);\n    function MaxPooling2D(args) {\n        return _super.call(this, args) || this;\n    }\n    MaxPooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    };\n    /** @nocollapse */\n    MaxPooling2D.className = 'MaxPooling2D';\n    return MaxPooling2D;\n}(Pooling2D));\nexports.MaxPooling2D = MaxPooling2D;\ntfjs_core_1.serialization.registerClass(MaxPooling2D);\nvar AveragePooling2D = /** @class */ (function (_super) {\n    __extends(AveragePooling2D, _super);\n    function AveragePooling2D(args) {\n        return _super.call(this, args) || this;\n    }\n    AveragePooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    };\n    /** @nocollapse */\n    AveragePooling2D.className = 'AveragePooling2D';\n    return AveragePooling2D;\n}(Pooling2D));\nexports.AveragePooling2D = AveragePooling2D;\ntfjs_core_1.serialization.registerClass(AveragePooling2D);\n/**\n * Abstract class for different pooling 3D layers.\n */\nvar Pooling3D = /** @class */ (function (_super) {\n    __extends(Pooling3D, _super);\n    function Pooling3D(args) {\n        var _this = this;\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2, 2];\n        }\n        _this = _super.call(this, args) || this;\n        _this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            _this.strides = _this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 3) {\n                throw new errors_1.ValueError(\"If the strides property of a 3D pooling layer is an Array, \" +\n                    \"it is expected to have a length of 3, but received length \" +\n                    (args.strides.length + \".\"));\n            }\n            _this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            _this.strides = [args.strides, args.strides, args.strides];\n        }\n        generic_utils_1.assertPositiveInteger(_this.poolSize, 'poolSize');\n        generic_utils_1.assertPositiveInteger(_this.strides, 'strides');\n        _this.padding = args.padding == null ? 'valid' : args.padding;\n        _this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        common_2.checkDataFormat(_this.dataFormat);\n        common_2.checkPaddingMode(_this.padding);\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 5 })];\n        return _this;\n    }\n    Pooling3D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = types_utils_1.getExactlyOneShape(inputShape);\n        var depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        var rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        var cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n        depths = conv_utils_1.convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n        rows =\n            conv_utils_1.convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n        cols =\n            conv_utils_1.convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], depths, rows, cols];\n        }\n        else {\n            return [inputShape[0], depths, rows, cols, inputShape[4]];\n        }\n    };\n    Pooling3D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            _this.invokeCallHook(inputs, kwargs);\n            return _this.poolingFunction(types_utils_1.getExactlyOneTensor(inputs), _this.poolSize, _this.strides, _this.padding, _this.dataFormat);\n        });\n    };\n    Pooling3D.prototype.getConfig = function () {\n        var config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Pooling3D;\n}(topology_2.Layer));\nexports.Pooling3D = Pooling3D;\nvar MaxPooling3D = /** @class */ (function (_super) {\n    __extends(MaxPooling3D, _super);\n    function MaxPooling3D(args) {\n        return _super.call(this, args) || this;\n    }\n    MaxPooling3D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    };\n    /** @nocollapse */\n    MaxPooling3D.className = 'MaxPooling3D';\n    return MaxPooling3D;\n}(Pooling3D));\nexports.MaxPooling3D = MaxPooling3D;\ntfjs_core_1.serialization.registerClass(MaxPooling3D);\nvar AveragePooling3D = /** @class */ (function (_super) {\n    __extends(AveragePooling3D, _super);\n    function AveragePooling3D(args) {\n        return _super.call(this, args) || this;\n    }\n    AveragePooling3D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_2.checkDataFormat(dataFormat);\n        common_2.checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    };\n    /** @nocollapse */\n    AveragePooling3D.className = 'AveragePooling3D';\n    return AveragePooling3D;\n}(Pooling3D));\nexports.AveragePooling3D = AveragePooling3D;\ntfjs_core_1.serialization.registerClass(AveragePooling3D);\n/**\n * Abstract class for different global pooling 1D layers.\n */\nvar GlobalPooling1D = /** @class */ (function (_super) {\n    __extends(GlobalPooling1D, _super);\n    function GlobalPooling1D(args) {\n        var _this = _super.call(this, args) || this;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];\n        return _this;\n    }\n    GlobalPooling1D.prototype.computeOutputShape = function (inputShape) {\n        return [inputShape[0], inputShape[2]];\n    };\n    GlobalPooling1D.prototype.call = function (inputs, kwargs) {\n        throw new errors_1.NotImplementedError();\n    };\n    return GlobalPooling1D;\n}(topology_2.Layer));\nexports.GlobalPooling1D = GlobalPooling1D;\nvar GlobalAveragePooling1D = /** @class */ (function (_super) {\n    __extends(GlobalAveragePooling1D, _super);\n    function GlobalAveragePooling1D(args) {\n        return _super.call(this, args || {}) || this;\n    }\n    GlobalAveragePooling1D.prototype.call = function (inputs, kwargs) {\n        return tfjs_core_1.tidy(function () {\n            var input = types_utils_1.getExactlyOneTensor(inputs);\n            return tfc.mean(input, 1);\n        });\n    };\n    /** @nocollapse */\n    GlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\n    return GlobalAveragePooling1D;\n}(GlobalPooling1D));\nexports.GlobalAveragePooling1D = GlobalAveragePooling1D;\ntfjs_core_1.serialization.registerClass(GlobalAveragePooling1D);\nvar GlobalMaxPooling1D = /** @class */ (function (_super) {\n    __extends(GlobalMaxPooling1D, _super);\n    function GlobalMaxPooling1D(args) {\n        return _super.call(this, args || {}) || this;\n    }\n    GlobalMaxPooling1D.prototype.call = function (inputs, kwargs) {\n        return tfjs_core_1.tidy(function () {\n            var input = types_utils_1.getExactlyOneTensor(inputs);\n            return tfc.max(input, 1);\n        });\n    };\n    /** @nocollapse */\n    GlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\n    return GlobalMaxPooling1D;\n}(GlobalPooling1D));\nexports.GlobalMaxPooling1D = GlobalMaxPooling1D;\ntfjs_core_1.serialization.registerClass(GlobalMaxPooling1D);\n/**\n * Abstract class for different global pooling 2D layers.\n */\nvar GlobalPooling2D = /** @class */ (function (_super) {\n    __extends(GlobalPooling2D, _super);\n    function GlobalPooling2D(args) {\n        var _this = _super.call(this, args) || this;\n        _this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        common_2.checkDataFormat(_this.dataFormat);\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];\n        return _this;\n    }\n    GlobalPooling2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = inputShape;\n        if (this.dataFormat === 'channelsLast') {\n            return [inputShape[0], inputShape[3]];\n        }\n        else {\n            return [inputShape[0], inputShape[1]];\n        }\n    };\n    GlobalPooling2D.prototype.call = function (inputs, kwargs) {\n        throw new errors_1.NotImplementedError();\n    };\n    GlobalPooling2D.prototype.getConfig = function () {\n        var config = { dataFormat: this.dataFormat };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return GlobalPooling2D;\n}(topology_2.Layer));\nexports.GlobalPooling2D = GlobalPooling2D;\nvar GlobalAveragePooling2D = /** @class */ (function (_super) {\n    __extends(GlobalAveragePooling2D, _super);\n    function GlobalAveragePooling2D() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalAveragePooling2D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var input = types_utils_1.getExactlyOneTensor(inputs);\n            if (_this.dataFormat === 'channelsLast') {\n                return tfc.mean(input, [1, 2]);\n            }\n            else {\n                return tfc.mean(input, [2, 3]);\n            }\n        });\n    };\n    /** @nocollapse */\n    GlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\n    return GlobalAveragePooling2D;\n}(GlobalPooling2D));\nexports.GlobalAveragePooling2D = GlobalAveragePooling2D;\ntfjs_core_1.serialization.registerClass(GlobalAveragePooling2D);\nvar GlobalMaxPooling2D = /** @class */ (function (_super) {\n    __extends(GlobalMaxPooling2D, _super);\n    function GlobalMaxPooling2D() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalMaxPooling2D.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var input = types_utils_1.getExactlyOneTensor(inputs);\n            if (_this.dataFormat === 'channelsLast') {\n                return tfc.max(input, [1, 2]);\n            }\n            else {\n                return tfc.max(input, [2, 3]);\n            }\n        });\n    };\n    /** @nocollapse */\n    GlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\n    return GlobalMaxPooling2D;\n}(GlobalPooling2D));\nexports.GlobalMaxPooling2D = GlobalMaxPooling2D;\ntfjs_core_1.serialization.registerClass(GlobalMaxPooling2D);\n"},"sourceMaps":{"js":{"version":3,"file":"pooling.js","sourceRoot":"","sources":["../../src/layers/pooling.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode, checkPoolMode} from '../common';\nimport {InputSpec} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {DataFormat, PaddingMode, PoolMode, Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\nimport {preprocessConv2DInput, preprocessConv3DInput} from './convolutional';\n\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param stridesdes strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(\n    x: Tensor, poolSize: [number, number], strides?: [number, number],\n    padding?: PaddingMode, dataFormat?: DataFormat,\n    poolMode?: PoolMode): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1];\n    }\n    if (padding == null) {\n      padding = 'valid';\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n    // dataFormat as an input argument.\n    x = preprocessConv2DInput(x, dataFormat);  // x is NHWC after preprocessing.\n    let y: Tensor;\n    const paddingString = (padding === 'same') ? 'same' : 'valid';\n    if (poolMode === 'max') {\n      // TODO(cais): Rank check?\n      y = tfc.maxPool(x as Tensor4D, poolSize, strides, paddingString);\n    } else {  // 'avg'\n      // TODO(cais): Check the dtype and rank of x and give clear error message\n      //   if those are incorrect.\n      y = tfc.avgPool(\n          // TODO(cais): Rank check?\n          x as Tensor3D | Tensor4D, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);  // NHWC -> NCHW.\n    }\n    return y;\n  });\n}\n\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(\n    x: Tensor5D, poolSize: [number, number, number],\n    strides?: [number, number, number], padding?: PaddingMode,\n    dataFormat?: DataFormat, poolMode?: PoolMode): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    checkPoolMode(poolMode);\n    checkPaddingMode(padding);\n    if (strides == null) {\n      strides = [1, 1, 1];\n    }\n    if (padding == null) {\n      padding = 'valid';\n    }\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (poolMode == null) {\n      poolMode = 'max';\n    }\n\n    // x is NDHWC after preprocessing.\n    x = preprocessConv3DInput(x as Tensor, dataFormat) as Tensor5D;\n    let y: Tensor;\n    const paddingString = (padding === 'same') ? 'same' : 'valid';\n    if (poolMode === 'max') {\n      y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n    } else {  // 'avg'\n      y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);  // NDHWC -> NCDHW.\n    }\n    return y;\n  });\n}\n\nexport declare interface Pooling1DLayerArgs extends LayerArgs {\n  /**\n   * Size of the window to pool over, should be an integer.\n   */\n  poolSize?: number|[number];\n  /**\n   * Period at which to sample the pooled values.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number];\n  /** How to fill in data that's not an integer multiple of poolSize. */\n  padding?: PaddingMode;\n}\n\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport abstract class Pooling1D extends Layer {\n  protected readonly poolSize: [number];\n  protected readonly strides: [number];\n  protected readonly padding: PaddingMode;\n\n  /**\n   *\n   * @param args Parameters for the Pooling layer.\n   *\n   * config.poolSize defaults to 2.\n   */\n  constructor(args: Pooling1DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = 2;\n    }\n    super(args);\n    if (typeof args.poolSize === 'number') {\n      this.poolSize = [args.poolSize];\n    } else if (\n        Array.isArray(args.poolSize) &&\n        (args.poolSize as number[]).length === 1 &&\n        typeof (args.poolSize as number[])[0] === 'number') {\n      this.poolSize = args.poolSize;\n    } else {\n      throw new ValueError(\n          `poolSize for 1D convolutional layer must be a number or an ` +\n          `Array of a single number, but received ` +\n          `${JSON.stringify(args.poolSize)}`);\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else {\n      if (typeof args.strides === 'number') {\n        this.strides = [args.strides];\n      } else if (\n          Array.isArray(args.strides) &&\n          (args.strides as number[]).length === 1 &&\n          typeof (args.strides as number[])[0] === 'number') {\n        this.strides = args.strides;\n      } else {\n        throw new ValueError(\n            `strides for 1D convolutional layer must be a number or an ` +\n            `Array of a single number, but received ` +\n            `${JSON.stringify(args.strides)}`);\n      }\n    }\n    assertPositiveInteger(this.strides, 'strides');\n\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const length = convOutputLength(\n        inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n    return [inputShape[0], length, inputShape[2]];\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Add dummy last dimension.\n      inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n      const output = this.poolingFunction(\n          getExactlyOneTensor(inputs), [this.poolSize[0], 1],\n          [this.strides[0], 1], this.padding, 'channelsLast');\n      // Remove dummy last dimension.\n      return tfc.squeeze(output, [2]);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling1D extends Pooling1D {\n  /** @nocollapse */\n  static className = 'MaxPooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling1D);\n\nexport class AveragePooling1D extends Pooling1D {\n  /** @nocollapse */\n  static className = 'AveragePooling1D';\n  constructor(args: Pooling1DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling1D);\n\nexport declare interface Pooling2DLayerArgs extends LayerArgs {\n  /**\n   * Factors by which to downscale in each dimension [vertical, horizontal].\n   * Expects an integer or an array of 2 integers.\n   *\n   * For example, `[2, 2]` will halve the input in both spatial dimension.\n   * If only one integer is specified, the same window length\n   * will be used for both dimensions.\n   */\n  poolSize?: number|[number, number];\n\n  /**\n   * The size of the stride in each dimension of the pooling window. Expects\n   * an integer or an array of 2 integers. Integer, tuple of 2 integers, or\n   * None.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number, number];\n\n  /** The padding type to use for the pooling layer. */\n  padding?: PaddingMode;\n  /** The data format to use for the pooling layer. */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport abstract class Pooling2D extends Layer {\n  protected readonly poolSize: [number, number];\n  protected readonly strides: [number, number];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Pooling2DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ?\n        args.poolSize :\n        [args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 2) {\n        throw new ValueError(\n            `If the strides property of a 2D pooling layer is an Array, ` +\n            `it is expected to have a length of 2, but received length ` +\n            `${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      this.strides = [args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    assertPositiveInteger(this.strides, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    let cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    rows =\n        convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n    cols =\n        convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(\n          getExactlyOneTensor(inputs), this.poolSize, this.strides,\n          this.padding, this.dataFormat);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling2D extends Pooling2D {\n  /** @nocollapse */\n  static className = 'MaxPooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling2D);\n\nexport class AveragePooling2D extends Pooling2D {\n  /** @nocollapse */\n  static className = 'AveragePooling2D';\n  constructor(args: Pooling2DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number], strides: [number, number],\n      padding: PaddingMode, dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling2D);\n\nexport declare interface Pooling3DLayerArgs extends LayerArgs {\n  /**\n   * Factors by which to downscale in each dimension [depth, height, width].\n   * Expects an integer or an array of 3 integers.\n   *\n   * For example, `[2, 2, 2]` will halve the input in three dimensions.\n   * If only one integer is specified, the same window length\n   * will be used for all dimensions.\n   */\n  poolSize?: number|[number, number, number];\n\n  /**\n   * The size of the stride in each dimension of the pooling window. Expects\n   * an integer or an array of 3 integers. Integer, tuple of 3 integers, or\n   * None.\n   *\n   * If `null`, defaults to `poolSize`.\n   */\n  strides?: number|[number, number, number];\n\n  /** The padding type to use for the pooling layer. */\n  padding?: PaddingMode;\n  /** The data format to use for the pooling layer. */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport abstract class Pooling3D extends Layer {\n  protected readonly poolSize: [number, number, number];\n  protected readonly strides: [number, number, number];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Pooling3DLayerArgs) {\n    if (args.poolSize == null) {\n      args.poolSize = [2, 2, 2];\n    }\n    super(args);\n    this.poolSize = Array.isArray(args.poolSize) ?\n        args.poolSize :\n        [args.poolSize, args.poolSize, args.poolSize];\n    if (args.strides == null) {\n      this.strides = this.poolSize;\n    } else if (Array.isArray(args.strides)) {\n      if (args.strides.length !== 3) {\n        throw new ValueError(\n            `If the strides property of a 3D pooling layer is an Array, ` +\n            `it is expected to have a length of 3, but received length ` +\n            `${args.strides.length}.`);\n      }\n      this.strides = args.strides;\n    } else {\n      // `config.strides` is a number.\n      this.strides = [args.strides, args.strides, args.strides];\n    }\n    assertPositiveInteger(this.poolSize, 'poolSize');\n    assertPositiveInteger(this.strides, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    checkPaddingMode(this.padding);\n\n    this.inputSpec = [new InputSpec({ndim: 5})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    let depths =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    let rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    let cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n    depths = convOutputLength(\n        depths, this.poolSize[0], this.padding, this.strides[0]);\n    rows =\n        convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n    cols =\n        convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], depths, rows, cols];\n    } else {\n      return [inputShape[0], depths, rows, cols, inputShape[4]];\n    }\n  }\n\n  protected abstract poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor;\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      return this.poolingFunction(\n          getExactlyOneTensor(inputs), this.poolSize, this.strides,\n          this.padding, this.dataFormat);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class MaxPooling3D extends Pooling3D {\n  /** @nocollapse */\n  static className = 'MaxPooling3D';\n  constructor(args: Pooling3DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(\n        inputs as Tensor5D, poolSize, strides, padding, dataFormat, 'max');\n  }\n}\nserialization.registerClass(MaxPooling3D);\n\nexport class AveragePooling3D extends Pooling3D {\n  /** @nocollapse */\n  static className = 'AveragePooling3D';\n  constructor(args: Pooling3DLayerArgs) {\n    super(args);\n  }\n\n  protected poolingFunction(\n      inputs: Tensor, poolSize: [number, number, number],\n      strides: [number, number, number], padding: PaddingMode,\n      dataFormat: DataFormat): Tensor {\n    checkDataFormat(dataFormat);\n    checkPaddingMode(padding);\n    return pool3d(\n        inputs as Tensor5D, poolSize, strides, padding, dataFormat, 'avg');\n  }\n}\nserialization.registerClass(AveragePooling3D);\n\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport abstract class GlobalPooling1D extends Layer {\n  constructor(args: LayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 3})];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], inputShape[2]];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n}\n\nexport class GlobalAveragePooling1D extends GlobalPooling1D {\n  /** @nocollapse */\n  static className = 'GlobalAveragePooling1D';\n  constructor(args?: LayerArgs) {\n    super(args || {});\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.mean(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling1D);\n\nexport class GlobalMaxPooling1D extends GlobalPooling1D {\n  /** @nocollapse */\n  static className = 'GlobalMaxPooling1D';\n  constructor(args: LayerArgs) {\n    super(args || {});\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      return tfc.max(input, 1);\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling1D);\n\nexport declare interface GlobalPooling2DLayerArgs extends LayerArgs {\n  /**\n   * One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n   *\n   * The ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\n   * to inputs with shape `[batch, height, width, channels[` while\n   * `CHANNEL_FIRST` corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport abstract class GlobalPooling2D extends Layer {\n  protected dataFormat: DataFormat;\n  constructor(args: GlobalPooling2DLayerArgs) {\n    super(args);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape;\n    if (this.dataFormat === 'channelsLast') {\n      return [inputShape[0], inputShape[3]];\n    } else {\n      return [inputShape[0], inputShape[1]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    throw new NotImplementedError();\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\nexport class GlobalAveragePooling2D extends GlobalPooling2D {\n  /** @nocollapse */\n  static className = 'GlobalAveragePooling2D';\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.mean(input, [1, 2]);\n      } else {\n        return tfc.mean(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalAveragePooling2D);\n\nexport class GlobalMaxPooling2D extends GlobalPooling2D {\n  /** @nocollapse */\n  static className = 'GlobalMaxPooling2D';\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsLast') {\n        return tfc.max(input, [1, 2]);\n      } else {\n        return tfc.max(input, [2, 3]);\n      }\n    });\n  }\n}\nserialization.registerClass(GlobalMaxPooling2D);\n"]}},"error":null,"hash":"4d25b076e5b180953731ec3d1691c3cb","cacheData":{"env":{}}}