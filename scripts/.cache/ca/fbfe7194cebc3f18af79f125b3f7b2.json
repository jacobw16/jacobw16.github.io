{"id":"node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js","dependencies":[{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\math_utils.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\src\\utils\\math_utils.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\package.json","includedInParent":true,"mtime":1582861032163},{"name":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1581030261368},{"name":"@tensorflow/tfjs-core","loc":{"line":23,"column":26},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\math_utils.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-core\\dist\\tf-core.esm.js"},{"name":"../errors","loc":{"line":24,"column":23},"parent":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\utils\\math_utils.js","resolved":"C:\\Users\\Jacob\\Documents\\jump(3)\\scripts\\node_modules\\@tensorflow\\tfjs-layers\\dist\\errors.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar errors_1 = require(\"../errors\");\n/**\n * Determine if a number is an integer.\n */\nfunction isInteger(x) {\n    return x === parseInt(x.toString(), 10);\n}\nexports.isInteger = isInteger;\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nfunction arrayProd(array, begin, end) {\n    if (begin == null) {\n        begin = 0;\n    }\n    if (end == null) {\n        end = array.length;\n    }\n    var prod = 1;\n    for (var i = begin; i < end; ++i) {\n        prod *= array[i];\n    }\n    return prod;\n}\nexports.arrayProd = arrayProd;\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array) {\n    array = Array.isArray(array) ? new Float32Array(array) : array;\n    return tfjs_core_1.tensor1d(array);\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nfunction min(array) {\n    return tfc.min(toArray1D(array)).dataSync()[0];\n}\nexports.min = min;\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nfunction max(array) {\n    return tfc.max(toArray1D(array)).dataSync()[0];\n}\nexports.max = max;\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nfunction sum(array) {\n    return tfc.sum(toArray1D(array)).dataSync()[0];\n}\nexports.sum = sum;\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nfunction mean(array) {\n    return sum(array) / array.length;\n}\nexports.mean = mean;\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nfunction variance(array) {\n    var demeaned = tfc.sub(toArray1D(array), tfjs_core_1.scalar(mean(array)));\n    var sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];\n    return sumSquare / array.length;\n}\nexports.variance = variance;\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nfunction median(array) {\n    var arraySorted = array.slice().sort(function (a, b) { return a - b; });\n    var lowIdx = Math.floor((arraySorted.length - 1) / 2);\n    var highIdx = Math.ceil((arraySorted.length - 1) / 2);\n    if (lowIdx === highIdx) {\n        return arraySorted[lowIdx];\n    }\n    return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\nexports.median = median;\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nfunction range(begin, end) {\n    if (end < begin) {\n        throw new errors_1.ValueError(\"end (\" + end + \") < begin (\" + begin + \") is forbidden.\");\n    }\n    var out = [];\n    for (var i = begin; i < end; ++i) {\n        out.push(i);\n    }\n    return out;\n}\nexports.range = range;\n"},"sourceMaps":{"js":{"version":3,"file":"math_utils.js","sourceRoot":"","sources":["../../src/utils/math_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar, Tensor1D, tensor1d} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array | Int32Array | Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n  array: number[] | ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array: number[] | Float32Array): Tensor1D {\n  array = Array.isArray(array) ? new Float32Array(array) : array;\n  return tensor1d(array);\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[] | Float32Array): number {\n  return tfc.min(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[] | Float32Array): number {\n  return tfc.max(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[] | Float32Array): number {\n  return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[] | Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[] | Float32Array): number {\n  const demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n  const sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[] | Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n"]}},"error":null,"hash":"c2823c0fb144613a77bc1d907e1f875f","cacheData":{"env":{}}}